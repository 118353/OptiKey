NEXT STEPS:

Remove OutputService.PublishModifiedVirtualKeyCodeSet - modifiers are not going to be applied like this anymore. Instead modifiers will be published automatically as they are pressed.
	Change PublishService methods - publish VirtualKeyCode, or string
	Remove multiple command keys; SelectAll, Copy, Cut, Paste
	Refactor to remove VirtualKeyCodeSet

Make Multi-key capture & publish LOCK instead of ON

Win key can be used as a modifier so add to all modifier logic.

OutputService changes:
	Change OutputService interface: Output(FunctionKey/String)
	OutputService should monitor KeyDownStates and publish key down/up when states change to On/Off
	Rename ReleaseUnlockedModifiers to ReleaseUnlockedKeys
	ReleaseUnlockedModifiers(); every time Output is called as a key was pressed.
		Modifiers (Shift,Ctrl,Alt,Win) should no longer ReleaseUnlockedKeys as they are not passed to OutputService directly.
		
Fix publish bugs (timing between key presses?) (keys behaving as if Ctrl is pressed):
	!Publishing Hello and swapping for hugely did not remove all letters, it left Hehugely!
	Move InputSimulator 'WindowsInput' project into solution.
	Remove InputBuilder.AddKeyPress - replace calls from KeyboardSimulator with chained AddKeyDown(x).AddKeyUp(x)
	Remove InputBuilder helper methods such as ModifiersDown/ModifiersUp/KeyPress(builder, keyCodes) - make the logic more explicit
	Rename InputBuilder.ToArray() to InputBuilder.Build() - it is the builder pattern after all
	Remove Sleep and other methods I am not using - the fixes can be back ported later, which needs to be manual anyway.
	Reorder InputBuilder and KeyboardSimulator methods to group them together in a nicer way - lots of overloads at the moment
	Change InputBuilder logic which creates INPUT:
		http://www.ownedcore.com/forums/mmo/warhammer-online/186390-sendinput-example-c.html
		[DllImport("user32.dll")]
        public static extern uint MapVirtualKey(uint uCode, uint uMapType);
		
		byte vk = WindowsAPI.VkKeyScan(ch);
        ushort scanCode = (ushort)WindowsAPI.MapVirtualKey(vk, 0);
		inputs[0].ki.wScan = (ushort)(scanCode & 0xff); //Only apply 0xff on key down, not key up
	Double check EXTENDEDKEY logic;
		"The extended-key flag indicates whether the keystroke message originated from one of the additional keys on the enhanced keyboard. The extended keys consist of the ALT and CTRL keys on the right-hand side of the keyboard; the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters to the left of the numeric keypad; the NUM LOCK key; the BREAK (CTRL+PAUSE) key; the PRINT SCRN key; and the divide (/) and ENTER keys in the numeric keypad. The extended-key flag is set if the key is an extended key." from http://msdn.microsoft.com/en-us/library/ms646267(v=vs.85).aspx
	Change SendSimulatedInput to dispatch inputs individually with conditional delays after each (down NOT up) in an attempt to simulator MS' On-Screen Keyboard behaviour.
	Add method to KeyboardSimulator and InputBuilder to reset keys (accepts set of virtual key codes).
	Add logging to show KEYBDINPUT structure as it is being published (translate flags to strings if possible).
	Sync key down state:
		Publish key down state is set to on - publish key downs for any keys which are On/Lock at the point of changing Publish state (make sure we publish key downs BEFORE any keys are automatically set to On/Lock by other reacting logic).
		Publish key down state is set to off - publish key ups for all keys which are down at the point of changing Publish state.
		Shutdown (if Publishing setting is true) - publish key ups for all keys which are down.
		
OSK debugging:
	NO VK+Scan+SCANCODE flag:
		Del
		Left, Right, Up, Down (arrow keys) - ETTA is currently sending VK only (+ EXTENDEDKEY)
		Menu key (not alt)
		Home
		End
		Insert
		PrntScrn
		PgUp
		PgDown

	VK ONLY (no scan):
		LSHIFT
		RSHIFT
		RMENU (not LMENU, which is VK+SCANCODE)
		PAUSE

	VK+Scan+SCANCODE flag:
		All other keys

	+ EXTENDED FLAG:
		LWIN
		Right control (which is represented as LCONTROL, but with the extended flag)
		+ plus all keys in "NO VK+Scan+SCANCODE flag" group

	WHY is the cbsize 40 when InputSimulator sends 28? Maybe not important though.

	SHUTDOWN:
		LWIN - Vk only
		85 - Vk only
		85 - Vk only + KEYUP
		LWIN - Vk only + KEYUP

Move sleep into keyboards (replace Sleep in More keyboard with Recalibrate). Make Space 2 keys wide and add Sleep in bottom right?

Instantiate services AFTER View has loaded - this gives us the chance to display a notification message if services error during initialisation (e.g. InputService can publish an Error event if the TET service is not running, but this will not be displayed. It also prevents clean shutdown.)

Add settings
	+ normal settings (hotkey window)
	+ accessible settings - keyboard style
		* include ability to move and resize keyboard

Recalibrate
	
Dictionary management window
	+ Add
	+ Remove
	
Add high contrast theme

Profile and optimise, especially keyboard transitions

Refactor any remaining large classes, e.g. MainViewModel

--------------------------------------------------------------------------------

TO DO?
Store usage statistics in a case sensitive way? Would need to keep track of originally cased entries (incl. suggestions). Does this have any benefit? Think about whole advantage of storing usage statistics. 
Character codes – ALT on/lock, then numbers, then ALT off
Auto complete words
	+ auto correct words
Predict next word
Defend user against moving to Metro interface - i.e. LWIN/RWIN/WIN pressed on its own (in Win 8/8.1/later versions?)
	Make them confirm that they want to do this?
	Provide a way back from Metro - can I still detect point location and provide a way back?

--------------------------------------------------------------------------------

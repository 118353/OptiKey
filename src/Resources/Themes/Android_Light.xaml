<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:behaviours="clr-namespace:JuliusSweetland.ETTA.UI.Behaviours"
                    xmlns:valueConverters="clr-namespace:JuliusSweetland.ETTA.UI.ValueConverters"
                    xmlns:properties="clr-namespace:JuliusSweetland.ETTA.Properties"
                    xmlns:enums="clr-namespace:JuliusSweetland.ETTA.Enums"
                    xmlns:controls="clr-namespace:JuliusSweetland.ETTA.UI.Controls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/JuliusSweetland.ETTA;component/Resources/Themes/Colours/Android.xaml" />
        <ResourceDictionary Source="/JuliusSweetland.ETTA;component/Resources/Icons/KeySymbols.xaml" />
        <ResourceDictionary>
            <SolidColorBrush x:Key="KeyDefaultForegroundBrush" Color="{StaticResource Black}" />
            <SolidColorBrush x:Key="KeyDefaultBorderBrush" Color="{StaticResource Grey}" />
            <SolidColorBrush x:Key="KeyDefaultBackgroundBrush" Color="{StaticResource White}" />

            <SolidColorBrush x:Key="KeyHoverForegroundBrush" Color="{StaticResource Red}" />
            <SolidColorBrush x:Key="KeySelectionProgressBrush" Color="{StaticResource Red}" />
            <SolidColorBrush x:Key="CapturingMultiKeySelectionBrush" Color="{StaticResource Red}" />

            <StaticResource x:Key="KeySelectionForeground" ResourceKey="Blue"/>
            <StaticResource x:Key="KeySelectionBorder" ResourceKey="Grey"/>
            <StaticResource x:Key="KeySelectionBackground" ResourceKey="Grey"/>
            
            <SolidColorBrush x:Key="KeyDownStateIsOnForegroundBrush" Color="{StaticResource Blue}" />
            <SolidColorBrush x:Key="KeyDownStateIsOnBorderBrush" Color="{StaticResource Grey}" />
            <SolidColorBrush x:Key="KeyDownStateIsOnBackgroundBrush" Color="{StaticResource White}" />

            <SolidColorBrush x:Key="KeyDownStateIsLockForegroundBrush" Color="{StaticResource Blue}" />
            <SolidColorBrush x:Key="KeyDownStateIsLockBorderBrush" Color="{StaticResource Grey}" />
            <SolidColorBrush x:Key="KeyDownStateIsLockBackgroundBrush" Color="{StaticResource White}" />

            <SolidColorBrush x:Key="KeyDisabledForegroundBrush" Color="{StaticResource Grey}" />
            <SolidColorBrush x:Key="KeyDisabledBorderBrush" Color="{StaticResource Grey}" />
            <SolidColorBrush x:Key="KeyDisabledBackgroundBrush" Color="{StaticResource LightGrey}" />

            <!--<SolidColorBrush x:Key="PointSelectionProgressBrush" Color="{StaticResource Red}" />
            <SolidColorBrush x:Key="PointSelectionBrush" Color="{StaticResource Blue}" />-->

            <SolidColorBrush x:Key="ScratchpadForegroundBrush" Color="{StaticResource Green}" />
            <SolidColorBrush x:Key="ScratchpadBorderBrush" Color="{StaticResource Grey}" />
            <SolidColorBrush x:Key="ScratchpadBackgroundBrush" Color="{StaticResource White}" />

            <SolidColorBrush x:Key="QuestionForegroundBrush" Color="{StaticResource Black}" />
            <SolidColorBrush x:Key="QuestionBackgroundBrush" Color="{StaticResource White}" />

            <SolidColorBrush x:Key="FrameDefaultBorderBrush" Color="{StaticResource White}" />
            <SolidColorBrush x:Key="FrameCapturingBorderBrush" Color="{StaticResource Red}" />

            <SolidColorBrush x:Key="PointsPerSecondForegroundBrush" Color="{StaticResource Green}" />

            <valueConverters:LengthDividedBySpan x:Key="LengthDividedBySpan" />

            <Style x:Key="KeyTextStyle" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource KeyDefaultForegroundBrush}" />
                <Setter Property="TextAlignment" Value="Center" />
                <Setter Property="Text" Value="{Binding Path=ShiftUpText, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" />
                <Setter Property="FontFamily" Value="{Binding Source={x:Static properties:Settings.Default}, Path=FontFamily}" />
                <Setter Property="FontWeight" Value="{Binding Source={x:Static properties:Settings.Default}, Path=FontWeight}" />
                <Setter Property="FontStretch" Value="{Binding Source={x:Static properties:Settings.Default}, Path=FontStretch}" />
                <Setter Property="Visibility" Value="Collapsed" />
                <Setter Property="behaviours:KeyBehaviours.BeginAnimationOnKeySelectionEvent">
                    <Setter.Value>
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" 
                                                          Duration="0:0:0.2" FillBehavior="Stop">
                                <DiscreteColorKeyFrame Value="{StaticResource KeySelectionForeground}" KeyTime="0:0:0" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <!--Is there text to display-->
                    <DataTrigger Binding="{Binding Path=HasText, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <!--This key is in a key down state of On-->
                    <DataTrigger Binding="{Binding Path=KeyDownState, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="{x:Static enums:KeyDownStates.On}">
                        <Setter Property="Foreground" Value="{StaticResource KeyDownStateIsOnForegroundBrush}" />
                    </DataTrigger>

                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Binding="{Binding Path=KeyDownState, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="{x:Static enums:KeyDownStates.Lock}">
                        <Setter Property="Foreground" Value="{StaticResource KeyDownStateIsOnForegroundBrush}" />
                    </DataTrigger>

                    <!--The Shift key is down-->
                    <DataTrigger Binding="{Binding Path=IsShiftDown, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="True">
                        <Setter Property="Text" Value="{Binding Path=ShiftDownText, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}, Mode=OneWay}" />
                    </DataTrigger>

                    <!--Is Key Valid-->
                    <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="False">
                        <Setter Property="Foreground" Value="{StaticResource KeyDisabledForegroundBrush}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeySymbolStyle" TargetType="{x:Type Path}">
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="Margin" Value="2" />
                <Setter Property="Data" Value="{Binding Path=SymbolGeometry, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}, Mode=OneWay}" />
                <Setter Property="Fill" Value="{StaticResource KeyDefaultForegroundBrush}" />
                <Setter Property="Visibility" Value="Collapsed" />
                <Setter Property="behaviours:KeyBehaviours.BeginAnimationOnKeySelectionEvent">
                    <Setter.Value>
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" 
                                                          Duration="0:0:0.2" FillBehavior="Stop">
                                <DiscreteColorKeyFrame Value="{StaticResource KeySelectionForeground}" KeyTime="0:0:0" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <!--Is there a symbol to display-->
                    <DataTrigger Binding="{Binding Path=HasSymbol, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}, Mode=OneWay}" Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <!--This key is in a key down state of On-->
                    <DataTrigger Binding="{Binding Path=KeyDownState, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="{x:Static enums:KeyDownStates.On}">
                        <Setter Property="Fill" Value="{StaticResource KeyDownStateIsOnForegroundBrush}" />
                    </DataTrigger>

                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Binding="{Binding Path=KeyDownState, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="{x:Static enums:KeyDownStates.Lock}">
                        <Setter Property="Fill" Value="{StaticResource KeyDownStateIsLockForegroundBrush}" />
                    </DataTrigger>

                    <!--Is Key Valid-->
                    <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="False">
                        <Setter Property="Fill" Value="{StaticResource KeyDisabledForegroundBrush}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeyLockBarStyle" TargetType="{x:Type Path}">
                <Setter Property="Visibility" Value="Hidden" />
                <Setter Property="Fill" Value="{StaticResource KeyDownStateIsLockForegroundBrush}" />
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="Margin" Value="10,2,10,2" />
                <Setter Property="Data" Value="{StaticResource LockBarIcon}" />
                <Style.Triggers>
                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Binding="{Binding Path=KeyDownState, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="{x:Static enums:KeyDownStates.Lock}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="SelectionProgressStyle" TargetType="{x:Type controls:ProgressPie}">
                <Setter Property="Fill" Value="{StaticResource KeySelectionProgressBrush}" />
                <Setter Property="MaxValue" Value="1" />
                <Setter Property="Value" Value="{Binding Path=SelectionProgress, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}, Mode=OneWay}" />
                <Style.Triggers>
                    <!--Progress is 0-->
                    <Trigger Property="Value" Value="0">
                        <Setter Property="Visibility" Value="Hidden" />
                    </Trigger>

                    <!--Is Key Valid-->
                    <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="False">
                        <Setter Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeyBorderStyle" TargetType="{x:Type Border}">
                <Setter Property="Padding" Value="2" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="{StaticResource KeyDefaultBorderBrush}" />
                <Setter Property="Background" Value="{StaticResource KeyDefaultBackgroundBrush}" />
                <Setter Property="behaviours:KeyBehaviours.BeginAnimationOnKeySelectionEvent">
                    <Setter.Value>
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                                   Duration="0:0:0.2" FillBehavior="Stop">
                                <DiscreteColorKeyFrame Value="{StaticResource KeySelectionBorder}" KeyTime="0:0:0" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                                   Duration="0:0:0.2" FillBehavior="Stop">
                                <DiscreteColorKeyFrame Value="{StaticResource KeySelectionBackground}" KeyTime="0:0:0" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <!--This key is in a key down state of On-->
                    <DataTrigger Binding="{Binding Path=KeyDownState, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="{x:Static enums:KeyDownStates.On}">
                        <Setter Property="BorderBrush" Value="{StaticResource KeyDownStateIsOnBorderBrush}" />
                        <Setter Property="Background" Value="{StaticResource KeyDownStateIsOnBackgroundBrush}" />
                    </DataTrigger>

                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Binding="{Binding Path=KeyDownState, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="{x:Static enums:KeyDownStates.Lock}">
                        <Setter Property="BorderBrush" Value="{StaticResource KeyDownStateIsLockBorderBrush}" />
                        <Setter Property="Background" Value="{StaticResource KeyDownStateIsLockBackgroundBrush}" />
                    </DataTrigger>

                    <!--Is Key Valid-->
                    <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="False">
                        <Setter Property="BorderBrush" Value="{StaticResource KeyDisabledBorderBrush}" />
                        <Setter Property="Background" Value="{StaticResource KeyDisabledBackgroundBrush}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeyBorderHighlightStyle" TargetType="{x:Type Border}">
                <Setter Property="BorderThickness" Value="5" />
                <Setter Property="BorderBrush" Value="{StaticResource KeyHoverForegroundBrush}" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <BlurEffect Radius="5.0" KernelType="Gaussian"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <!--Is Key Valid-->
                    <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="False">
                        <Setter Property="BorderBrush" Value="{StaticResource KeyDisabledForegroundBrush}" />
                    </DataTrigger>

                    <!--Make visible when this key is current-->
                    <DataTrigger Binding="{Binding Path=IsCurrent, RelativeSource={RelativeSource AncestorType=controls:Key}}" Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type controls:Key}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:Key}">
                            <Grid>
                                <Border Style="{StaticResource KeyBorderStyle}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition SharedSizeGroup="LockBarSharedHeight" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition SharedSizeGroup="LockBarSharedHeight" />
                                        </Grid.RowDefinitions>
                                        <ContentControl Grid.Row="1">
                                            <!--Enforce size limits of one key high/wide using the Span info on the key-->
                                            <ContentControl.MaxWidth>
                                                <MultiBinding Converter="{StaticResource LengthDividedBySpan}">
                                                    <MultiBinding.Bindings>
                                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Grid}}" />
                                                        <Binding Path="WidthSpan" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </ContentControl.MaxWidth>
                                            <ContentControl.MaxHeight>
                                                <MultiBinding Converter="{StaticResource LengthDividedBySpan}">
                                                    <MultiBinding.Bindings>
                                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Grid}}" />
                                                        <Binding Path="HeightSpan" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </ContentControl.MaxHeight>
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="1*" />
                                                    <ColumnDefinition Width="4*" />
                                                    <ColumnDefinition Width="1*" />
                                                </Grid.ColumnDefinitions>
                                                <controls:ProgressPie Grid.ColumnSpan="3" 
                                                                      Style="{StaticResource SelectionProgressStyle}" />
                                                <Viewbox Grid.Column="1">
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition SharedSizeGroup="{Binding Path=SharedSizeGroup, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" />
                                                        </Grid.ColumnDefinitions>
                                                        <StackPanel Orientation="Vertical">
                                                            <Path Style="{StaticResource KeySymbolStyle}" Width="64" Height="64" />
                                                            <TextBlock Style="{StaticResource KeyTextStyle}" />
                                                        </StackPanel>
                                                    </Grid>
                                                </Viewbox>
                                            </Grid>
                                        </ContentControl>
                                        <Path Grid.Row="2" Style="{StaticResource KeyLockBarStyle}" />
                                    </Grid>
                                </Border>
                                <Border Style="{StaticResource KeyBorderHighlightStyle}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type controls:Scratchpad}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:Scratchpad}">
                            <Border BorderThickness="1" BorderBrush="{StaticResource ScratchpadBorderBrush}">
                                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden"
                                          behaviours:ScrollViewerBehaviours.AutoScrollToEndOnPropertyOrCollectionChanged="{TemplateBinding Text}">
                                    <TextBlock Text="{TemplateBinding Text}"
                                               HorizontalAlignment="Stretch"
                                               FontFamily="{Binding Source={x:Static properties:Settings.Default}, Path=FontFamily}"
                                               FontWeight="{Binding Source={x:Static properties:Settings.Default}, Path=FontWeight}"
                                               FontStretch="{Binding Source={x:Static properties:Settings.Default}, Path=FontStretch}"
                                               Foreground="{StaticResource ScratchpadForegroundBrush}"
                                               Background="{StaticResource ScratchpadBackgroundBrush}"/>
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type controls:QuestionText}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:QuestionText}">
                            <controls:TextBlockScaler>
                                <TextBlock Text="{TemplateBinding Text}"
                                           TextWrapping="Wrap"
                                           TextAlignment="Center"
                                           HorizontalAlignment="Stretch"
                                           FontFamily="{Binding Source={x:Static properties:Settings.Default}, Path=FontFamily}"
                                           FontWeight="{Binding Source={x:Static properties:Settings.Default}, Path=FontWeight}"
                                           FontStretch="{Binding Source={x:Static properties:Settings.Default}, Path=FontStretch}"
                                           Foreground="{StaticResource QuestionForegroundBrush}"
                                           Background="{StaticResource QuestionBackgroundBrush}"/>
                            </controls:TextBlockScaler>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>
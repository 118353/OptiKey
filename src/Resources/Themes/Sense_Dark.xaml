<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:JuliusSweetland.ETTA.UI.UserControls"
                    xmlns:valueConverters="clr-namespace:JuliusSweetland.ETTA.UI.ValueConverters"
                    xmlns:properties="clr-namespace:JuliusSweetland.ETTA.Properties"
                    xmlns:enums="clr-namespace:JuliusSweetland.ETTA.Enums"
                    xmlns:models="clr-namespace:JuliusSweetland.ETTA.Models">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/JuliusSweetland.ETTA;component/Resources/Themes/Colours/Sense.xaml" />
        <ResourceDictionary Source="/JuliusSweetland.ETTA;component/Resources/Icons/KeySymbols.xaml" />
        <ResourceDictionary Source="/JuliusSweetland.ETTA;component/Resources/Styles/CircularProgressBar.xaml" />
        <ResourceDictionary>
            <SolidColorBrush x:Key="KeyDefaultForegroundBrush" Color="{StaticResource White}" />
            <SolidColorBrush x:Key="KeyDefaultBorderBrush" Color="{StaticResource Gray}" />
            <SolidColorBrush x:Key="KeyDefaultBackgroundBrush" Color="{StaticResource Black}" />

            <SolidColorBrush x:Key="KeyHoverForegroundBrush" Color="{StaticResource Red}" />
            <SolidColorBrush x:Key="KeySelectionProgressBrush" Color="{StaticResource Red}" />
            <SolidColorBrush x:Key="CapturingMultiKeySelectionBrush" Color="{StaticResource Red}" />

            <StaticResource x:Key="KeySelectionForeground" ResourceKey="Blue"/>
            <StaticResource x:Key="KeySelectionBorder" ResourceKey="Gray"/>
            <StaticResource x:Key="KeySelectionBackground" ResourceKey="Gray"/>

            <SolidColorBrush x:Key="KeySelectionOnForegroundBrush" Color="{StaticResource Blue}" />
            <SolidColorBrush x:Key="KeySelectionOnBorderBrush" Color="{StaticResource Gray}" />
            <SolidColorBrush x:Key="KeySelectionOnBackgroundBrush" Color="{StaticResource Black}" />

            <SolidColorBrush x:Key="KeySelectionLockForegroundBrush" Color="{StaticResource Blue}" />
            <SolidColorBrush x:Key="KeySelectionLockBorderBrush" Color="{StaticResource Gray}" />
            <SolidColorBrush x:Key="KeySelectionLockBackgroundBrush" Color="{StaticResource Black}" />

            <SolidColorBrush x:Key="KeyDisabledForegroundBrush" Color="{StaticResource Gray}" />
            <SolidColorBrush x:Key="KeyDisabledBorderBrush" Color="{StaticResource Gray}" />
            <SolidColorBrush x:Key="KeyDisabledBackgroundBrush" Color="{StaticResource Black}" />

            <SolidColorBrush x:Key="PointSelectionProgressBrush" Color="{StaticResource Red}" />
            <SolidColorBrush x:Key="PointSelectionBrush" Color="{StaticResource Blue}" />

            <SolidColorBrush x:Key="ScratchPadForegroundBrush" Color="{StaticResource Black}" />
            <SolidColorBrush x:Key="ScratchPadBorderBrush" Color="{StaticResource White}" />
            <SolidColorBrush x:Key="ScratchPadBackgroundBrush" Color="{StaticResource White}" />

            <valueConverters:DictionaryAndKeyCombiner x:Key="DictionaryAndKeyCombiner" />
            <valueConverters:AllValuesAreEqual x:Key="AllValuesAreEqual" />
            <valueConverters:LengthDividedBySpan x:Key="LengthDividedBySpan" />

            <Style x:Key="KeyTextStyle" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource KeyDefaultForegroundBrush}" />
                <Setter Property="TextAlignment" Value="Center" />
                <Setter Property="Text" Value="{Binding Path=LowerText, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" />
                <Setter Property="FontFamily" Value="{Binding Source={x:Static properties:Settings.Default}, Path=KeyFontFamily}" />
                <Setter Property="FontWeight" Value="{Binding Source={x:Static properties:Settings.Default}, Path=KeyFontWeight}" />
                <Setter Property="FontStretch" Value="{Binding Source={x:Static properties:Settings.Default}, Path=KeyFontStretch}" />
                <Setter Property="FontSize" Value="64px" />
                <!--Font size same as symbol canvas size (64px)-->
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <!--Is there text to display-->
                    <DataTrigger Binding="{Binding Path=HasText, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <!--This key is in a key down state of On-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.On}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Foreground" Value="{StaticResource KeySelectionOnForegroundBrush}" />
                    </DataTrigger>

                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.Lock}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Foreground" Value="{StaticResource KeySelectionLockForegroundBrush}" />
                    </DataTrigger>

                    <!--The Shift key is in a key down state of On-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.On}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding>
                                    <Binding.Source>
                                        <models:KeyValue FunctionKey="{x:Static enums:FunctionKeys.Shift}" />
                                    </Binding.Source>
                                </Binding>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Text" Value="{Binding Path=UpperText, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" />
                    </DataTrigger>

                    <!--The Shift key is in a key down state of Lock-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.Lock}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding>
                                    <Binding.Source>
                                        <models:KeyValue FunctionKey="{x:Static enums:FunctionKeys.Shift}" />
                                    </Binding.Source>
                                </Binding>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Text" Value="{Binding Path=UpperText, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" />
                    </DataTrigger>

                    <!--This key is publish only, but we are not publishing-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsPublishOnly, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" Value="True" />
                            <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=PublishingKeys}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Foreground" Value="{StaticResource KeyDisabledForegroundBrush}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <!--Animation when this key is selected-->
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource AllValuesAreEqual}">
                                <Binding Path="DataContext.KeySelection" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" 
                                                                   Duration="0:0:0.25" FillBehavior="Stop">
                                        <DiscreteColorKeyFrame Value="{StaticResource KeySelectionForeground}" KeyTime="0:0:0" />
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeySymbolStyle" TargetType="{x:Type Path}">
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="Margin" Value="2" />
                <Setter Property="Data" Value="{Binding Path=SymbolGeometry, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" />
                <Setter Property="Fill" Value="{StaticResource KeyDefaultForegroundBrush}" />
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <!--Is there a symbol to display-->
                    <DataTrigger Binding="{Binding Path=HasSymbol, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <!--This key is in a key down state of On-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.On}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Fill" Value="{StaticResource KeySelectionOnForegroundBrush}" />
                    </DataTrigger>

                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.Lock}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Fill" Value="{StaticResource KeySelectionLockForegroundBrush}" />
                    </DataTrigger>

                    <!--This key is publish only, but we are not publishing-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsPublishOnly, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" Value="True" />
                            <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=PublishingKeys}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Fill" Value="{StaticResource KeyDisabledForegroundBrush}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeyLockBarStyle" TargetType="{x:Type Path}">
                <Setter Property="Visibility" Value="Hidden" />
                <Setter Property="Fill" Value="{StaticResource KeySelectionLockForegroundBrush}" />
                <Setter Property="Stretch" Value="Uniform" />
                <Setter Property="Margin" Value="2" />
                <Setter Property="Data" Value="{StaticResource LockBarIcon}" />
                <Style.Triggers>
                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.Lock}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeyBorderStyle" TargetType="{x:Type Border}">
                <Setter Property="Padding" Value="2" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="{StaticResource KeyDefaultBorderBrush}" />
                <Setter Property="Background" Value="{StaticResource KeyDefaultBackgroundBrush}" />
                <Setter Property="Tag" Value="{Binding Path=Value, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" />
                <Style.Triggers>
                    <!--This key is in a key down state of On-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.On}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="BorderBrush" Value="{StaticResource KeySelectionOnBorderBrush}" />
                        <Setter Property="Background" Value="{StaticResource KeySelectionOnBackgroundBrush}" />
                    </DataTrigger>

                    <!--This key is in a key down state of Lock-->
                    <DataTrigger Value="{x:Static enums:KeyDownStates.Lock}">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource DictionaryAndKeyCombiner}">
                                <Binding Path="DataContext.KeyDownStates" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="BorderBrush" Value="{StaticResource KeySelectionLockBorderBrush}" />
                        <Setter Property="Background" Value="{StaticResource KeySelectionLockBackgroundBrush}" />
                    </DataTrigger>

                    <!--This key is publish only, but we are not publishing-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsPublishOnly, RelativeSource={RelativeSource AncestorType={x:Type controls:Key}}}" Value="True" />
                            <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=PublishingKeys}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="BorderBrush" Value="{StaticResource KeyDisabledBorderBrush}" />
                            <Setter Property="Background" Value="{StaticResource KeyDisabledBackgroundBrush}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <!--Animation when this key is selected-->
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource AllValuesAreEqual}">
                                <Binding Path="DataContext.KeySelection" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                                   Duration="0:0:0.25" FillBehavior="Stop">
                                        <DiscreteColorKeyFrame Value="{StaticResource KeySelectionBorder}" KeyTime="0:0:0" />
                                    </ColorAnimationUsingKeyFrames>
                                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                                   Duration="0:0:0.25" FillBehavior="Stop">
                                        <DiscreteColorKeyFrame Value="{StaticResource KeySelectionBackground}" KeyTime="0:0:0" />
                                    </ColorAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="KeyBorderHighlightStyle" TargetType="{x:Type Border}">
                <Setter Property="BorderThickness" Value="5" />
                <Setter Property="BorderBrush" Value="{StaticResource KeyHoverForegroundBrush}" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <BlurEffect Radius="5.0" KernelType="Gaussian"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource AllValuesAreEqual}">
                                <Binding Path="DataContext.CurrentPositionKey" RelativeSource="{RelativeSource AncestorType=controls:KeyboardHost}" />
                                <Binding Path="Value" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type controls:Key}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:Key}">
                            <Grid>
                                <Border Style="{StaticResource KeyBorderStyle}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition SharedSizeGroup="LockBarSharedHeight" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition SharedSizeGroup="LockBarSharedHeight" />
                                        </Grid.RowDefinitions>
                                        <Viewbox Grid.Row="1">
                                            <!--Enforce size limits of one key high/wide using the Span info on the key-->
                                            <Viewbox.MaxWidth>
                                                <MultiBinding Converter="{StaticResource LengthDividedBySpan}">
                                                    <MultiBinding.Bindings>
                                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Grid}}" />
                                                        <Binding Path="WidthSpan" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </Viewbox.MaxWidth>
                                            <Viewbox.MaxHeight>
                                                <MultiBinding Converter="{StaticResource LengthDividedBySpan}">
                                                    <MultiBinding.Bindings>
                                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Grid}}" />
                                                        <Binding Path="HeightSpan" RelativeSource="{RelativeSource AncestorType={x:Type controls:Key}}" />
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </Viewbox.MaxHeight>
                                            <StackPanel Orientation="Vertical">
                                                <Path Style="{StaticResource KeySymbolStyle}" />
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition SharedSizeGroup="KeyGridSharedWidth" />
                                                    </Grid.ColumnDefinitions>
                                                    <TextBlock Style="{StaticResource KeyTextStyle}" />
                                                </Grid>
                                            </StackPanel>
                                        </Viewbox>
                                        <Path Grid.Row="2" Style="{StaticResource KeyLockBarStyle}" />
                                    </Grid>
                                </Border>
                                <Border Style="{StaticResource KeyBorderHighlightStyle}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>